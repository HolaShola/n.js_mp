---
swagger: "2.0"
info:
  description: "This is a simple API"
  version: "1.0.0"
  title: "Swagger node_mp"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:10010"
basePath: "/JS_S/nj_mp/1.0.0"
# tags:
# - name: "city"
#   description: "Everything about cities"
#   externalDocs:
#     description: "Find out more"
#     url: "http://swagger.io"
# - name: "product"
#   description: "Everything about products"
# - name: "user"
#   description: "Everything about users"
#   externalDocs:
#     description: "Find out more about our store"
#     url: "http://swagger.io"
consumes:
  - application/json
produces:
  - application/json  
schemes:
- "https"
- "http"
paths:
  /hello:
    x-swagger-router-controller: hello_world
    get:
      description: Returns 'Hello' to the caller
      operationId: hello
      parameters:
        - name: name
          in: query
          description: The name of the person to whom to say hello
          required: false
          type: string
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/HelloWorldResponse"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
  /products:
    x-swagger-router-controller: product_controller
    get:
      # tags:
      # - "products"
      description: "Return all Products"
      operationId: "findAllProducts"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "status"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: false
        type: string
      responses:
        "200":
          description: Success
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Product"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      # tags:
      # - "products"
      summary: "Add a new product to the store(list of products)"
      operationId: "postProduct"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "product"
        description: "Product that needs to be added to the store"
        required: false
        schema:
          $ref: "#/definitions/Product"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/Product"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "Product not found"
    put:
      tags:
      - "product"
      summary: "Update an existing product"
      operationId: "updateProduct"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        description: "Product object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Product"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Product not found"
        405:
          description: "Validation exception"
  /products/{productId}:
    x-swagger-router-controller: product_controller
    get:
      # tags:
      # - "product"
      summary: "Find product by ID"
      description: "Returns a single product"
      operationId: "getProductById"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "productId"
        in: "path"
        description: "ID of product to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Product"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Product not found"
      # security:
      # - api_key: []
    delete:
      # tags:
      # - "product"
      summary: "Deletes a product by ID"
      operationId: "removeProduct"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "productId"
        in: "path"
        description: "Product id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Product not found"
  /cities:
    x-swagger-router-controller: city_controller
    get:
      tags:
      - "city"
      summary: "Find all cities"
      description: "Returns a map of status codes to quantities"
      operationId: "getAllCities"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: Success
          schema:
            # type: "object"
            # additionalProperties:
            #   type: "integer"
            #   format: "int32"
            $ref: "#/definitions/City"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"  
    post:
      # tags:
      # - "cities"
      summary: "Add a new city"
      operationId: "postCity"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "city"
        description: "City that needs to be added to the store"
        required: false
        schema:
          $ref: "#/definitions/City"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/City"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "City not found"
  /cities/{cityId}:
    x-swagger-router-controller: city_controller
    get:
      # tags:
      # - "store"
      summary: "Find city by ID"
      description: "Returns a single city"
      operationId: "getCityById"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "cityId"
        in: "path"
        description: "ID of city to return"
        required: true
        type: "string"
        # maximum: 10.0
        # minimum: 1
        # format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/City"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Order not found"
    delete:
      # tags:
      # - "store"
      summary: "Delete a city by ID"
      description: "Delete a city by ID"
      operationId: "removeCity"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "cityId"
        in: "path"
        description: "ID of the city that needs to be deleted"
        required: true
        type: "string"
        # minimum: 1
        # format: "int64"
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Order not found"
  /users:
    x-swagger-router-controller: user_controller
    get:
      tags:
      - "user"
      summary: "Finds Users by status"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "getAllUsers"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "status"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: false
        type: "array"
        items:
          type: "string"
          enum:
          - "available"
          - "pending"
          - "sold"
          default: "available"
        collectionFormat: "multi"
      responses:
        200:
          description: Success
          schema:
            # type: "array"
            # items:
              $ref: "#/definitions/User"
        default:
          description: Error
          schema:
            $ref: "#/definitions/ErrorResponse"
    post:
      # tags:
      # - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "postUser"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "user"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        "200":
          description: Success
          schema:
            $ref: "#/definitions/User"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "User not found"
  /users/{userId}:
    x-swagger-router-controller: user_controller
    get:
      # tags:
      # - "user"
      summary: "Get user by ID"
      operationId: "getUserById"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "userId"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing."
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
    delete:
      # tags:
      # - "user"
      summary: "Delete user by ID"
      description: "Delete user bu ID"
      operationId: "removeUser"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of the user that needs to be deleted"
        required: true
        type: "integer"
        format: "int64"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
securityDefinitions:
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  HelloWorldResponse:
    required:
      - message
    properties:
      message:
        type: string     
  ErrorResponse:
    properties:
      message:
        type: string
    required:
      - message
    # required:
    #   - message
    # properties:
    #   message:
    #     type: string
  Product:
    # type: "object"
    properties:
      # _id:
      #   type: "string"
      id:
        type: "integer"
      #  format: "int64"
      #  type: "string"
      name:
        type: "string"
      brand:
        type: "string"
      company:
        type: "string"
      price:
        type: "string"
      #  format: "int64"
      isbn:
        type: "string"
        # default: false
    # example:
    #   id: 3
    #   name: "Lizergin Acid"
    #   brand: "Bayer LA-INC"
    #   company: "Bayer INC"
    #   price: 23.42999999999999971578290569595992565155029296875
    #   isbn: "234968-54"
    # xml:
    #   name: "Product"
  City:
  #  type: "object"
    properties:
      name:
        type: "string"
      country:
        type: "string"
      capital:
        type: "string"
      location:
        $ref: "#/definitions/City_location"
    example:
      name: "Brest"
      country: "Belarus"
      capital: false
      location:
        lat: 52.09762099999999662713889847509562969207763671875
        long: 23.734049999999999869260136620141565799713134765625
    xml:
      name: "City"
  User:
  #  type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      email:
        type: "string"
    example:
      id: 0
      email: "email"
      username: "username"
    xml:
      name: "User"
  City_location:
    properties:
      lat:
        type: "integer"
        format: "int64"
      long:
        type: "integer"
        format: "int64"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
