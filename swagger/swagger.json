{
  "swagger" : "2.0",
  "info" : {
    "description" : "This is a simple API",
    "version" : "1.0.0",
    "title" : "Swagger node_mp",
    "termsOfService" : "http://swagger.io/terms/",
    "contact" : {
      "email" : "apiteam@swagger.io"
    },
    "license" : {
      "name" : "Apache 2.0",
      "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host" : "virtserver.swaggerhub.com",
  "basePath" : "/JS_S/nj_mp/1.0.0",
  "tags" : [ {
    "name" : "city",
    "description" : "Everything about cities",
    "externalDocs" : {
      "description" : "Find out more",
      "url" : "http://swagger.io"
    }
  }, {
    "name" : "product",
    "description" : "Everything about products"
  }, {
    "name" : "user",
    "description" : "Everything about users",
    "externalDocs" : {
      "description" : "Find out more about our store",
      "url" : "http://swagger.io"
    }
  } ],
  "schemes" : [ "https", "http" ],
  "paths" : {
    "/api/products" : {
      "get" : {
        "tags" : [ "product" ],
        "summary" : "Finds Products by status",
        "description" : "Multiple status values can be provided with comma separated strings",
        "operationId" : "findProductsByStatus",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "status",
          "in" : "query",
          "description" : "Status values that need to be considered for filter",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "available", "pending", "sold" ],
            "default" : "available"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/Product"
              }
            }
          },
          "400" : {
            "description" : "Invalid status value"
          }
        }
      },
      "post" : {
        "tags" : [ "products" ],
        "summary" : "Add a new product to the store(list of products)",
        "operationId" : "addProduct",
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Product that needs to be added to the store",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Product"
          }
        } ],
        "responses" : {
          "405" : {
            "description" : "Invalid input"
          }
        }
      },
      "put" : {
        "tags" : [ "product" ],
        "summary" : "Update an existing product",
        "operationId" : "updateProduct",
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Product object that needs to be added to the store",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Product"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Product not found"
          },
          "405" : {
            "description" : "Validation exception"
          }
        }
      }
    },
    "/api/products/{productId}" : {
      "get" : {
        "tags" : [ "product" ],
        "summary" : "Find product by ID",
        "description" : "Returns a single product",
        "operationId" : "getProductById",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "productId",
          "in" : "path",
          "description" : "ID of product to return",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Product"
            }
          },
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Product not found"
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      },
      "delete" : {
        "tags" : [ "product" ],
        "summary" : "Deletes a product by ID",
        "operationId" : "deleteProduct",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "api_key",
          "in" : "header",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "productId",
          "in" : "path",
          "description" : "Product id to delete",
          "required" : true,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Product not found"
          }
        }
      }
    },
    "/api/cities" : {
      "get" : {
        "tags" : [ "store" ],
        "summary" : "Returns pet inventories by status",
        "description" : "Returns a map of status codes to quantities",
        "operationId" : "getInventory",
        "produces" : [ "application/json" ],
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "integer",
                "format" : "int32"
              }
            }
          }
        },
        "security" : [ {
          "api_key" : [ ]
        } ]
      },
      "post" : {
        "tags" : [ "cities" ],
        "summary" : "Add a new city",
        "operationId" : "addCity",
        "consumes" : [ "application/json", "application/xml" ],
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "City that needs to be added to the store",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/City"
          }
        } ],
        "responses" : {
          "405" : {
            "description" : "Invalid input"
          }
        }
      }
    },
    "/api/cities/{cityId}" : {
      "get" : {
        "tags" : [ "store" ],
        "summary" : "Find city by ID",
        "description" : "Returns a single city",
        "operationId" : "getCityById",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "cityId",
          "in" : "path",
          "description" : "ID of city to return",
          "required" : true,
          "type" : "integer",
          "maximum" : 10.0,
          "minimum" : 1,
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/City"
            }
          },
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Order not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "store" ],
        "summary" : "Delete a city by ID",
        "description" : "For valid response try integer IDs with positive integer value.\\ \\ Negative or non-integer values will generate API errors",
        "operationId" : "deleteCity",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "cityId",
          "in" : "path",
          "description" : "ID of the city that needs to be deleted",
          "required" : true,
          "type" : "integer",
          "minimum" : 1,
          "format" : "int64"
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid ID supplied"
          },
          "404" : {
            "description" : "Order not found"
          }
        }
      }
    },
    "/api/users" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Finds Users by status",
        "description" : "Multiple status values can be provided with comma separated strings",
        "operationId" : "findUsersByStatus",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "status",
          "in" : "query",
          "description" : "Status values that need to be considered for filter",
          "required" : true,
          "type" : "array",
          "items" : {
            "type" : "string",
            "enum" : [ "available", "pending", "sold" ],
            "default" : "available"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/User"
              }
            }
          },
          "400" : {
            "description" : "Invalid status value"
          }
        }
      },
      "post" : {
        "tags" : [ "user" ],
        "summary" : "Create user",
        "description" : "This can only be done by the logged in user.",
        "operationId" : "createUser",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "in" : "body",
          "name" : "body",
          "description" : "Created user object",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/User"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      }
    },
    "/api/users/{userId}" : {
      "get" : {
        "tags" : [ "user" ],
        "summary" : "Get user by ID",
        "operationId" : "getUserById",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "The name that needs to be fetched. Use user1 for testing.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/User"
            }
          },
          "400" : {
            "description" : "Invalid username supplied"
          },
          "404" : {
            "description" : "User not found"
          }
        }
      },
      "delete" : {
        "tags" : [ "user" ],
        "summary" : "Delete user by ID",
        "description" : "For valid response try integer IDs with positive integer value.\\ \\ Negative or non-integer values will generate API errors",
        "operationId" : "deleteUser",
        "produces" : [ "application/json", "application/xml" ],
        "parameters" : [ {
          "name" : "userId",
          "in" : "path",
          "description" : "ID of the user that needs to be deleted",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "400" : {
            "description" : "Invalid username supplied"
          },
          "404" : {
            "description" : "User not found"
          }
        }
      }
    }
  },
  "securityDefinitions" : {
    "petstore_auth" : {
      "type" : "oauth2",
      "authorizationUrl" : "http://petstore.swagger.io/oauth/dialog",
      "flow" : "implicit",
      "scopes" : {
        "write:pets" : "modify pets in your account",
        "read:pets" : "read your pets"
      }
    },
    "api_key" : {
      "type" : "apiKey",
      "name" : "api_key",
      "in" : "header"
    }
  },
  "definitions" : {
    "Product" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "name" : {
          "type" : "string"
        },
        "brand" : {
          "type" : "string"
        },
        "company" : {
          "type" : "string"
        },
        "price" : {
          "type" : "integer",
          "format" : "int64"
        },
        "isbn" : {
          "type" : "boolean",
          "default" : false
        }
      },
      "example" : {
        "id" : 3,
        "name" : "Lizergin Acid",
        "brand" : "Bayer LA-INC",
        "company" : "Bayer INC",
        "price" : 23.43,
        "isbn" : "234968-54"
      },
      "xml" : {
        "name" : "Product"
      }
    },
    "City" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "country" : {
          "type" : "string"
        },
        "capital" : {
          "type" : "string"
        },
        "location" : {
          "$ref" : "#/definitions/City_location"
        }
      },
      "example" : {
        "name" : "Brest",
        "country" : "Belarus",
        "capital" : false,
        "location" : {
          "lat" : 52.097621,
          "long" : 23.73405
        }
      },
      "xml" : {
        "name" : "City"
      }
    },
    "User" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "integer",
          "format" : "int64"
        },
        "username" : {
          "type" : "string"
        },
        "email" : {
          "type" : "string"
        }
      },
      "example" : {
        "id" : 0,
        "email" : "email",
        "username" : "username"
      },
      "xml" : {
        "name" : "User"
      }
    },
    "City_location" : {
      "properties" : {
        "lat" : {
          "type" : "integer",
          "format" : "int64"
        },
        "long" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    }
  },
  "externalDocs" : {
    "description" : "Find out more about Swagger",
    "url" : "http://swagger.io"
  }
}